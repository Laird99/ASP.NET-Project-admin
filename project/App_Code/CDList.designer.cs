#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CDs")]
public partial class CDListDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCD(CD instance);
  partial void UpdateCD(CD instance);
  partial void DeleteCD(CD instance);
  #endregion
	
	public CDListDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CDsConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public CDListDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public CDListDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public CDListDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public CDListDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<CD> CDs
	{
		get
		{
			return this.GetTable<CD>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CDs")]
public partial class CD : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DiskID;
	
	private string _AlbumName;
	
	private string _Artist;
	
	private System.Nullable<int> _TrackCount;
	
	private string _RecordLabel;
	
	private System.Nullable<System.DateTime> _ReleaseDate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDiskIDChanging(int value);
    partial void OnDiskIDChanged();
    partial void OnAlbumNameChanging(string value);
    partial void OnAlbumNameChanged();
    partial void OnArtistChanging(string value);
    partial void OnArtistChanged();
    partial void OnTrackCountChanging(System.Nullable<int> value);
    partial void OnTrackCountChanged();
    partial void OnRecordLabelChanging(string value);
    partial void OnRecordLabelChanged();
    partial void OnReleaseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReleaseDateChanged();
    #endregion
	
	public CD()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DiskID
	{
		get
		{
			return this._DiskID;
		}
		set
		{
			if ((this._DiskID != value))
			{
				this.OnDiskIDChanging(value);
				this.SendPropertyChanging();
				this._DiskID = value;
				this.SendPropertyChanged("DiskID");
				this.OnDiskIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string AlbumName
	{
		get
		{
			return this._AlbumName;
		}
		set
		{
			if ((this._AlbumName != value))
			{
				this.OnAlbumNameChanging(value);
				this.SendPropertyChanging();
				this._AlbumName = value;
				this.SendPropertyChanged("AlbumName");
				this.OnAlbumNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artist", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Artist
	{
		get
		{
			return this._Artist;
		}
		set
		{
			if ((this._Artist != value))
			{
				this.OnArtistChanging(value);
				this.SendPropertyChanging();
				this._Artist = value;
				this.SendPropertyChanged("Artist");
				this.OnArtistChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrackCount", DbType="Int")]
	public System.Nullable<int> TrackCount
	{
		get
		{
			return this._TrackCount;
		}
		set
		{
			if ((this._TrackCount != value))
			{
				this.OnTrackCountChanging(value);
				this.SendPropertyChanging();
				this._TrackCount = value;
				this.SendPropertyChanged("TrackCount");
				this.OnTrackCountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordLabel", DbType="NVarChar(75)")]
	public string RecordLabel
	{
		get
		{
			return this._RecordLabel;
		}
		set
		{
			if ((this._RecordLabel != value))
			{
				this.OnRecordLabelChanging(value);
				this.SendPropertyChanging();
				this._RecordLabel = value;
				this.SendPropertyChanged("RecordLabel");
				this.OnRecordLabelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseDate", DbType="Date")]
	public System.Nullable<System.DateTime> ReleaseDate
	{
		get
		{
			return this._ReleaseDate;
		}
		set
		{
			if ((this._ReleaseDate != value))
			{
				this.OnReleaseDateChanging(value);
				this.SendPropertyChanging();
				this._ReleaseDate = value;
				this.SendPropertyChanged("ReleaseDate");
				this.OnReleaseDateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
